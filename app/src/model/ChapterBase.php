<?php
/*
 * Copyright (c) 2013 The Olympos Development Team.
 * 
 * http://sourceforge.net/projects/olympos/
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html. If redistributing this code,
 * this entire header must remain intact.
 */

/**
 * This file was generated by ChronosGenerator  from model.uml.
 * Manual modifications should be placed inside the protected regions.
 */
namespace app\src\model;

use app\src\model\EntityBase;

use wcmf\lib\i18n\Message;
use wcmf\lib\persistence\ObjectId;

/**
 * @class Chapter
 * Chapter description: A book is divided into chapters. A chapter may contain subchapters.
 *
 * @author 
 * @version 1.0
 */
class ChapterBase extends EntityBase {

    /**
     * Constructor
     * @param oid ObjectId instance (optional)
     */
    public function __construct($oid=null) {
      if ($oid == null) {
        $oid = new ObjectId('Chapter');
    }
      parent::__construct($oid);
    }

    /**
     * @see PersistentObject::getObjectDisplayName()
     */
    public function getObjectDisplayName() {
      return Message::get("Chapter");
    }

    /**
     * @see PersistentObject::getObjectDescription()
     */
    public function getObjectDescription() {
      return Message::get("A book is divided into chapters. A chapter may contain subchapters.");
    }

    /**
     * @see PersistentObject::getValueDisplayName()
     */
    public function getValueDisplayName($name) {
      $displayName = $name;
      if ($name == 'id') { $displayName = Message::get("id"); }
      if ($name == 'fk_chapter_id') { $displayName = Message::get("fk_chapter_id"); }
      if ($name == 'fk_book_id') { $displayName = Message::get("fk_book_id"); }
      if ($name == 'fk_author_id') { $displayName = Message::get("fk_author_id"); }
      if ($name == 'name') { $displayName = Message::get("name"); }
      if ($name == 'created') { $displayName = Message::get("created"); }
      if ($name == 'creator') { $displayName = Message::get("creator"); }
      if ($name == 'modified') { $displayName = Message::get("modified"); }
      if ($name == 'last_editor') { $displayName = Message::get("last_editor"); }
      return Message::get($displayName);
    }

    /**
     * @see PersistentObject::getValueDescription()
     */
    public function getValueDescription($name) {
      $description = $name;
      if ($name == 'id') { $description = Message::get(""); }
      if ($name == 'fk_chapter_id') { $description = Message::get(""); }
      if ($name == 'fk_book_id') { $description = Message::get(""); }
      if ($name == 'fk_author_id') { $description = Message::get(""); }
      if ($name == 'name') { $description = Message::get(""); }
      if ($name == 'created') { $description = Message::get(""); }
      if ($name == 'creator') { $description = Message::get(""); }
      if ($name == 'modified') { $description = Message::get(""); }
      if ($name == 'last_editor') { $description = Message::get(""); }
      return Message::get($description);
    }

    /**
     * Get the Author instances in the Author relation
     * @return Array of Author instances
     */
    public function getAuthorList() {
      return $this->getValue('Author');
    }

    /**
     * Set the Author instances in the Author relation
     * @param nodeList Array of Author instances
     */
    public function setAuthorList(array $nodeList) {
      $this->setValue('Author', null);
      foreach ($nodeList as $node) {
        $this->addNode($node, 'Author');
      }
    }
    /**
     * Get the Book instances in the Book relation
     * @return Array of Book instances
     */
    public function getBookList() {
      return $this->getValue('Book');
    }

    /**
     * Set the Book instances in the Book relation
     * @param nodeList Array of Book instances
     */
    public function setBookList(array $nodeList) {
      $this->setValue('Book', null);
      foreach ($nodeList as $node) {
        $this->addNode($node, 'Book');
      }
    }
    /**
     * Get the Chapter instances in the ParentChapter relation
     * @return Array of Chapter instances
     */
    public function getParentChapterList() {
      return $this->getValue('ParentChapter');
    }

    /**
     * Set the Chapter instances in the ParentChapter relation
     * @param nodeList Array of Chapter instances
     */
    public function setParentChapterList(array $nodeList) {
      $this->setValue('ParentChapter', null);
      foreach ($nodeList as $node) {
        $this->addNode($node, 'ParentChapter');
      }
    }
    /**
     * Get the Chapter instances in the SubChapter relation
     * @return Array of Chapter instances
     */
    public function getSubChapterList() {
      return $this->getValue('SubChapter');
    }

    /**
     * Set the Chapter instances in the SubChapter relation
     * @param nodeList Array of Chapter instances
     */
    public function setSubChapterList(array $nodeList) {
      $this->setValue('SubChapter', null);
      foreach ($nodeList as $node) {
        $this->addNode($node, 'SubChapter');
      }
    }
    /**
     * Get the Image instances in the TitleImage relation
     * @return Array of Image instances
     */
    public function getTitleImageList() {
      return $this->getValue('TitleImage');
    }

    /**
     * Set the Image instances in the TitleImage relation
     * @param nodeList Array of Image instances
     */
    public function setTitleImageList(array $nodeList) {
      $this->setValue('TitleImage', null);
      foreach ($nodeList as $node) {
        $this->addNode($node, 'TitleImage');
      }
    }
    /**
     * Get the Image instances in the NormalImage relation
     * @return Array of Image instances
     */
    public function getNormalImageList() {
      return $this->getValue('NormalImage');
    }

    /**
     * Set the Image instances in the NormalImage relation
     * @param nodeList Array of Image instances
     */
    public function setNormalImageList(array $nodeList) {
      $this->setValue('NormalImage', null);
      foreach ($nodeList as $node) {
        $this->addNode($node, 'NormalImage');
      }
    }
}
?>
