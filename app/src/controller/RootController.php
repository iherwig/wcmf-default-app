<?php

/**
 * This file was generated by ChronosGenerator  from model.uml.
 * Manual modifications should be placed inside the protected regions.
 */
namespace app\src\controller;

use wcmf\lib\presentation\Controller;
// PROTECTED REGION ID(app/src/controller/RootController.php/Import) ENABLED START
use wcmf\lib\config\Configuration;
use wcmf\lib\config\ConfigurationException;
use wcmf\lib\core\Session;
use wcmf\lib\i18n\Localization;
use wcmf\lib\i18n\Message;
use wcmf\lib\io\FileUtil;
use wcmf\lib\persistence\PersistenceFacade;
use wcmf\lib\security\PermissionManager;
use wcmf\lib\security\principal\impl\AnonymousUser;
use wcmf\lib\security\principal\impl\DefaultPrincipalFactory;
use wcmf\lib\security\principal\PrincipalFactory;
use wcmf\lib\util\URIUtil;
// PROTECTED REGION END

/**
 * RootController description:
 *
 * The following configuration settings are defined for this controller:
 *
 * [actionmapping]
 * ??cms = app\src\controller\RootController
 *
 * [views]
 * app\src\controller\RootController?? = app/src/views/cms.tpl
 *
 * @author
 * @version 1.0
 */
class RootController extends Controller {
// PROTECTED REGION ID(app/src/controller/RootController.php/Body) ENABLED START
  private $_principalFactory = null;

  /**
   * Constructor
   * @param $session
   * @param $persistenceFacade
   * @param $permissionManager
   * @param $localization
   * @param $message
   * @param $configuration
   * @param $principalFactory
   */
  public function __construct(Session $session,
          PersistenceFacade $persistenceFacade,
          PermissionManager $permissionManager,
          Localization $localization,
          Message $message,
          Configuration $configuration,
          PrincipalFactory $principalFactory) {
    parent::__construct($session, $persistenceFacade,
            $permissionManager, $localization, $message, $configuration);
    $this->_principalFactory = $principalFactory;
  }

  /**
   * @see Controller::doExecute()
   */
  protected function doExecute() {
    $response = $this->getResponse();

    // check for authenticated user
    $session = $this->getSession();
    $isLoggedIn = !($session->getAuthUser() instanceof AnonymousUser);

    // get configuration values
    $configuration = $this->getConfiguration();
    $appTitle = $configuration->getValue('title', 'application');
    $appColor = $configuration->getValue('color', 'application');
    $rootTypes = $configuration->getValue('rootTypes', 'application');
    $uiLanguage = $configuration->getValue('language', 'message');
    $defaultLanguage = $configuration->getValue('defaultLanguage', 'localization');
    $languages = $configuration->getSection('languages');
    $mediaAbsPath = $configuration->getDirectoryValue('uploadDir', 'media');
    $inputTypes = $configuration->getSection('inputTypes');
    $displayTypes = $configuration->getSection('displayTypes');

    if ($this->_principalFactory instanceof DefaultPrincipalFactory) {
      $roleType = $configuration->getValue('roleType', 'principalFactory');
      $userType = $configuration->getValue('userType', 'principalFactory');
    }
    else {
      $userType = '';
      $roleType = '';
    }

    if ($configuration->hasValue('permissionType', 'defaultPermissionManager')) {
      $permissionType = $configuration->getValue('permissionType', 'defaultPermissionManager');
    }
    else {
      $permissionType = '';
    }

    // validate config
    if (!is_array($rootTypes) || sizeof($rootTypes) == 0) {
      throw new ConfigurationException("No root types defined.");
    }

    // check if the user should be redirected to the login page
    // if yes, we do this and add the requested path as route parameter
    $pathPrefix = str_replace('\\', '/', dirname($_SERVER['SCRIPT_NAME']));
    $basePath = !preg_match('/\/$/', $pathPrefix) ? $pathPrefix.'/' : $pathPrefix;
    $script = str_replace('\\', '/', basename($_SERVER['SCRIPT_NAME']));
    $requestPath = $_SERVER['REQUEST_URI'];
    // remove basepath & script from request path to get the requested resource
    $requestedResource = strpos($requestPath, $basePath) === 0 ?
            preg_replace('/^'.$script.'/', '', str_replace($basePath, '', $requestPath)) : '';
    if (!$isLoggedIn && strlen($requestedResource) > 0 && !preg_match('/\?route=/', $requestPath)) {
      if ($requestPath != 'logout') {
        $redirectUrl = URIUtil::getProtocolStr().$_SERVER['HTTP_HOST'].$basePath.'?route='.$requestedResource;
        header("Location: ".$redirectUrl);
        exit;
      }
    }
    $baseHref = str_replace('\\', '/', dirname(URIUtil::getProtocolStr().$_SERVER['HTTP_HOST'].$_SERVER['SCRIPT_NAME']).'/');
    $mediaPathRelScript = URIUtil::makeRelative($mediaAbsPath, dirname(FileUtil::realpath($_SERVER['SCRIPT_FILENAME'])).'/');
    $mediaPathRelBase = URIUtil::makeRelative($mediaAbsPath, WCMF_BASE);

    // define client configuration
    $clientConfig = array(
      'title' => $appTitle,
      'color' => $appColor,
      'backendUrl' => $basePath,
      'rootTypes' => $rootTypes,
      'pathPrefix' => $basePath,
      'mediaBaseUrl' => URIUtil::makeAbsolute($mediaPathRelScript, $baseHref),
      'mediaBasePath' => $mediaPathRelScript,
      'mediaSavePath' => $mediaPathRelBase,
      'uiLanguage' => $uiLanguage,
      'defaultLanguage' => $defaultLanguage,
      'languages' => $languages,
      'inputTypes' => $inputTypes,
      'displayTypes' => $displayTypes,
      'userType' => $userType,
      'roleType' => $roleType,
      'permissionType' => $permissionType
    );

    $response->setValue('appTitle', $appTitle);
    $response->setValue('baseHref', $baseHref);
    $response->setValue('uiLanguage', $uiLanguage);
    $response->setValue('clientConfig', json_encode($clientConfig));
  }
// PROTECTED REGION END

}
?>
